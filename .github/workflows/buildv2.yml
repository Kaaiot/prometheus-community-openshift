name: Build Charts and Release

on:
  push:
    branches:
      - main
    paths:
      - 'charts/**'

jobs:
  build:
    name: Run build.sh and release charts
    runs-on: [self-hosted, helm-builder]
    env:
      EMAIL: ${{ secrets.EMAIL }}
      USERNAME: ${{ secrets.USERNAME }}
      TOKEN: ${{ secrets.TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

#      - name: Clean gh-pages branch
#        run: |
#          git config user.name "$USERNAME"
#          git config user.email "$EMAIL"
#          git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}
#          git checkout gh-pages
#          
#          find . -name '*.tgz' -exec git rm -f {} \;
#          git rm -f index.yaml || echo "index.yaml not found, skipping"
#          
#          git commit -m "Clean up pages before build" || echo "No changes to commit"
#          git push origin gh-pages
#          git checkout main

#      - name: Delete all GitHub releases and tags
#        run: |
#          releases=$(curl -s -H "Authorization: token $TOKEN" \
#            "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | [.id, .tag_name] | @tsv')
#
#          if [ -z "$releases" ]; then
#            echo "No releases to delete."
#            exit 0
#          fi
#
#          while IFS=$'\t' read -r release_id tag_name; do
#            echo "Deleting release ID: $release_id with tag: $tag_name"
#            curl -s -X DELETE -H "Authorization: token $TOKEN" \
#              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
#            git push origin --delete "$tag_name" || echo "Tag $tag_name not found remotely."
#          done <<< "$releases"

      - name: Run build script
        run: |
          wget ftp://10.2.12.1/pub/builds/helm-v3.18.3-linux-amd64.tar.gz
          #wget https://get.helm.sh/helm-v3.18.3-linux-amd64.tar.gz
          tar xzf helm-v3.18.3-linux-amd64.tar.gz
          mv linux-amd64/helm helm
          rm -f helm-v3.18.3-linux-amd64.tar.gz
          rm -rf linux-amd64
          
          wget ftp://10.2.12.1/pub/builds/chart-releaser_1.8.1_linux_amd64.tar.gz
          #wget https://github.com/helm/chart-releaser/releases/download/v1.8.1/chart-releaser_1.8.1_linux_amd64.tar.gz
          tar xzf chart-releaser_1.8.1_linux_amd64.tar.gz
          rm -f chart-releaser_1.8.1_linux_amd64.tar.gz
          
          wget ftp://10.2.12.1/pub/builds/yq_linux_amd64 -O yq
          #wget "https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64" -O yq
          chmod +x yq
          
          for file in $(find charts/ -name 'Chart.yaml'); do
            if ./yq 'has("dependencies") and (.dependencies | length > 0)' "$file" | grep -q true; then
              ./yq -r '.dependencies[] | "./helm repo add \(.name) \(.repository) || echo \"itsOk\""' "$file" >> deps.sh
            fi
          done
          
          bash deps.sh
          cat deps.sh
          rm -f deps.sh
          
          for chart in $(find charts -maxdepth 1 -mindepth 1 -type d); do
            ./helm dependency update $chart
            ./cr package $chart
          done
          
          git reset --hard
          git checkout gh-pages
          
          cp -f .cr-release-packages/* .
          git add *.tgz
          git commit -m "adding packages"
          git push origin gh-pages

      - name: Switch to gh-pages to prepare .tgz release
        run: git checkout gh-pages

      - name: Create releases for each .tgz
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          for file in *.tgz; do
            [ -e "$file" ] || continue
            base=$(basename "$file" .tgz)
            tag="${base}"

            echo "Processing $file with tag $tag..."

            # Check if release exists
            release_info=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/releases/tags/$tag")

            release_id=$(echo "$release_info" | jq -r '.id // empty')

            if [[ -n "$release_id" ]]; then
              echo "Release with tag $tag exists. Deleting release ID $release_id..."

              # Delete the release
              curl -s -X DELETE \
                -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO/releases/$release_id"

              # Delete the tag remotely and locally
              git tag -d "$tag" || echo "Local tag $tag doesn't exist"
              git push origin --delete "$tag" || echo "Remote tag $tag doesn't exist"
            fi

            echo "Creating new tag and release for $tag"
            git tag "$tag"
            git push origin "$tag"

            # Create release.json
            echo "{
              \"tag_name\": \"$tag\",
              \"name\": \"$base\",
              \"body\": \"Release for $base\",
              \"draft\": false,
              \"prerelease\": false
            }" > release.json

            release_response=$(curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              --data @release.json \
              "https://api.github.com/repos/$REPO/releases")

            upload_url=$(echo "$release_response" | jq -r .upload_url | sed -e "s/{?name,label}//")

            echo "Uploading asset $file to release $tag..."
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/gzip" \
              --data-binary @"$file" \
              "$upload_url?name=$(basename "$file")"
          done

      - name: create index
        run: |
          git checkout gh-pages
          ./cr index -o $USERNAME -r prometheus-community-openshift --packages-with-index -i . -p .cr-release-packages -t $TOKEN --push
          
